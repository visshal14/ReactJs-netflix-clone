{"ast":null,"code":"import _asyncToGenerator from\"/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState}from\"react\";import axios from\"./axios\";import\"./Row.css\";import Youtube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var baseUrl=\"https://image.tmdb.org/t/p/original\";function Row(_ref){var titles=_ref.titles,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.log(requests)\nsetMovies(request.data.results);// return request;\ncase 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);// console.log(movies)\nvar opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var UrlParams=new URLSearchParams(new URL(url).search);console.log(UrlParams.get(\"v\"));setTrailerUrl(UrlParams.get(\"v\"));}).catch(function(error){console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:titles}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(baseUrl).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(Youtube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","axios","Youtube","movieTrailer","baseUrl","Row","titles","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","UrlParams","URLSearchParams","URL","search","console","log","catch","error","map","poster_path","backdrop_path","id"],"mappings":"2cAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CAGA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,GAAMC,CAAAA,OAAO,CAAG,qCAAhB,CAEA,QAASC,CAAAA,GAAT,MAA2C,IAA7BC,CAAAA,MAA6B,MAA7BA,MAA6B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAZC,UAAY,MAAZA,UAAY,CAEvC,cAA2BR,QAAQ,CAAC,EAAD,CAAnC,wCAAOS,MAAP,eAAcC,SAAd,eACA,eAAmCV,QAAQ,CAAC,EAAD,CAA3C,yCAAOW,UAAP,eAAkBC,aAAlB,eACAb,SAAS,CAAC,UAAI,SAEKc,CAAAA,SAFL,qIAEV,qKAC0BZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEI;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CACA;AAJJ,sDAFU,4CASVJ,SAAS,GAEZ,CAXQ,CAWP,CAACN,QAAD,CAXO,CAAT,CAYA;AAEA,GAAMW,CAAAA,IAAI,CAAC,CACPC,MAAM,CAAE,KADD,CAEPC,KAAK,CAAC,MAFC,CAGPC,UAAU,CAAC,CACPC,QAAQ,CAAC,CADF,CAHJ,CAAX,CAOA,GAAMC,CAAAA,WAAW,CAAC,QAAZA,CAAAA,WAAY,CAACC,KAAD,CAAS,CACvB,GAAGb,UAAH,CAAc,CACVC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAEK,CAEDT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAa,EAAd,CAAZ,CAA+BC,IAA/B,CAAoC,SAAAC,GAAG,CAAE,CACrC,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAC,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACd,GAAV,CAAc,GAAd,CAAZ,EACAF,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CAEH,CALD,EAKGoB,KALH,CAKS,SAACC,KAAD,CAAS,CACdH,OAAO,CAACC,GAAR,CAAYE,KAAZ,EACH,CAPD,EAQH,CACJ,CAdD,CAeA,mBAEI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAK7B,MAAL,EADJ,cAGI,YAAK,SAAS,CAAC,aAAf,UAEKG,MAAM,CAAC2B,GAAP,CAAW,SAAAZ,KAAK,qBAEb,YACA,OAAO,CAAE,yBAAID,CAAAA,WAAW,CAACC,KAAD,CAAf,EADT,CAEA,SAAS,uBAAkBhB,UAAU,EAAI,kBAAhC,CAFT,CAE+D,GAAG,WAAOJ,OAAP,SAAiBI,UAAU,CAACgB,KAAK,CAACa,WAAP,CAAmBb,KAAK,CAACc,aAApD,CAFlE,CAEuI,GAAG,CAAEd,KAAK,CAACC,IAFlJ,EAAUD,KAAK,CAACe,EAAhB,CAFa,EAAhB,CAFL,EAHJ,CAYI5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAZlB,GAFJ,CAkBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport axios from \"./axios\"\nimport \"./Row.css\"\n\n\nimport Youtube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({titles,fetchUrl ,isLargeRow}){\n\n    const [movies,setMovies] = useState([])\n    const [trailerUrl,setTrailerUrl] = useState(\"\")\n    useEffect(()=>{\n\n        async function fetchData(){\n            const request = await axios.get(fetchUrl)\n            // console.log(requests)\n            setMovies(request.data.results);\n            // return request;\n\n        }\n        fetchData()\n\n    },[fetchUrl]);\n    // console.log(movies)\n\n    const opts={\n        height :\"390\",\n        width:\"100%\",\n        playerVars:{\n            autoplay:1\n        }\n    }\n    const handleClick=(movie)=>{\n        if(trailerUrl){\n            setTrailerUrl(\"\")\n        }else{\n\n            movieTrailer(movie?.name||\"\" ).then(url=>{\n                const UrlParams = new URLSearchParams(new URL(url).search);\n                console.log(UrlParams.get(\"v\"))\n                setTrailerUrl(UrlParams.get(\"v\"));\n\n            }).catch((error)=>{\n                console.log(error)\n            })\n        }\n    }\n    return(\n\n        <div className=\"row\">\n            <h2>{titles}</h2>\n            {/* <h2>{movies}</h2> */}\n            <div className=\"row_posters\" >\n\n                {movies.map(movie => (\n                    \n                    <img key={movie.id} \n                    onClick={()=>handleClick(movie)}\n                    className ={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src = {`${baseUrl}${isLargeRow?movie.poster_path:movie.backdrop_path}`} alt={movie.name}></img> \n                ))}\n            </div>\n           {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n\n    )\n}\n\nexport default Row"]},"metadata":{},"sourceType":"module"}