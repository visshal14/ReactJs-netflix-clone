{"ast":null,"code":"var _jsxFileName = \"/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    titles,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(requests)\n\n      setMovies(request.data.results); // return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // console.log(movies)\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const UrlParams = new URLSearchParams(new URL(url).search);\n        console.log(UrlParams.get(\"v\"));\n        setTrailerUrl(UrlParams.get(\"v\"));\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: titles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"L1ywPNv5QsX47ZoMAyL8l4aBE/I=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/vishal/Documents/vscode/ReactJs/netflix clone/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","axios","Youtube","movieTrailer","baseUrl","Row","titles","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","UrlParams","URLSearchParams","URL","search","console","log","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AAGA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,OAAO,GAAG,qCAAhB;;AAEA,SAASC,GAAT,OAA2C;AAAA;;AAAA,MAA9B;AAACC,IAAAA,MAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAA8B;AAEvC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBV,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACW,UAAD,EAAYC,aAAZ,IAA6BZ,QAAQ,CAAC,EAAD,CAA3C;AACAD,EAAAA,SAAS,CAAC,MAAI;AAEV,mBAAec,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADsB,CAEtB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT,CAHsB,CAItB;AAEH;;AACDJ,IAAAA,SAAS;AAEZ,GAXQ,EAWP,CAACN,QAAD,CAXO,CAAT,CAJuC,CAgBvC;;AAEA,QAAMW,IAAI,GAAC;AACPC,IAAAA,MAAM,EAAE,KADD;AAEPC,IAAAA,KAAK,EAAC,MAFC;AAGPC,IAAAA,UAAU,EAAC;AACPC,MAAAA,QAAQ,EAAC;AADF;AAHJ,GAAX;;AAOA,QAAMC,WAAW,GAAEC,KAAD,IAAS;AACvB,QAAGb,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEK;AAEDT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAa,EAAd,CAAZ,CAA+BC,IAA/B,CAAoCC,GAAG,IAAE;AACrC,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACb,GAAV,CAAc,GAAd,CAAZ;AACAH,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AAEH,OALD,EAKGmB,KALH,CAKUC,KAAD,IAAS;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,OAPD;AAQH;AACJ,GAdD;;AAeA,sBAEI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK7B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEKG,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBAEb;AACA,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CADxB;AAEA,QAAA,SAAS,EAAI,eAAchB,UAAU,IAAI,kBAAmB,EAF5D;AAE+D,QAAA,GAAG,EAAK,GAAEJ,OAAQ,GAAEI,UAAU,GAACgB,KAAK,CAACa,WAAP,GAAmBb,KAAK,CAACc,aAAc,EAFpI;AAEuI,QAAA,GAAG,EAAEd,KAAK,CAACC;AAFlJ,SAAUD,KAAK,CAACe,EAAhB;AAAA;AAAA;AAAA;AAAA,cAFH;AAFL;AAAA;AAAA;AAAA;AAAA,YAHJ,EAYI5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAZlB;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAkBH;;GA1DQb,G;;KAAAA,G;AA4DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport axios from \"./axios\"\nimport \"./Row.css\"\n\n\nimport Youtube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({titles,fetchUrl ,isLargeRow}){\n\n    const [movies,setMovies] = useState([])\n    const [trailerUrl,setTrailerUrl] = useState(\"\")\n    useEffect(()=>{\n\n        async function fetchData(){\n            const request = await axios.get(fetchUrl)\n            // console.log(requests)\n            setMovies(request.data.results);\n            // return request;\n\n        }\n        fetchData()\n\n    },[fetchUrl]);\n    // console.log(movies)\n\n    const opts={\n        height :\"390\",\n        width:\"100%\",\n        playerVars:{\n            autoplay:1\n        }\n    }\n    const handleClick=(movie)=>{\n        if(trailerUrl){\n            setTrailerUrl(\"\")\n        }else{\n\n            movieTrailer(movie?.name||\"\" ).then(url=>{\n                const UrlParams = new URLSearchParams(new URL(url).search);\n                console.log(UrlParams.get(\"v\"))\n                setTrailerUrl(UrlParams.get(\"v\"));\n\n            }).catch((error)=>{\n                console.log(error)\n            })\n        }\n    }\n    return(\n\n        <div className=\"row\">\n            <h2>{titles}</h2>\n            {/* <h2>{movies}</h2> */}\n            <div className=\"row_posters\" >\n\n                {movies.map(movie => (\n                    \n                    <img key={movie.id} \n                    onClick={()=>handleClick(movie)}\n                    className ={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src = {`${baseUrl}${isLargeRow?movie.poster_path:movie.backdrop_path}`} alt={movie.name}></img> \n                ))}\n            </div>\n           {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n\n    )\n}\n\nexport default Row"]},"metadata":{},"sourceType":"module"}